<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

<script>
  const tableName = "People";
  const tableView = "Website";


  const adminTableName = "Jubile Festival Discovery Admin";
  const adminTableView = "Grid view";

  // Fetch the data from Airtable using the Airtable API
  const fetchAirtableData = async (tableName, tableView) => {
  const apiKey = "XXXXXXX";
  const baseId = "XXXXXXX";
  let allRecords = [];
  let offset = null;

  try {
    do {
      const url = new URL(`https://api.airtable.com/v0/${baseId}/${tableName}`);
      url.searchParams.append("view", tableView);
      url.searchParams.append("filterByFormula", `{Show Profile on Website}=TRUE()`);
      if (offset) url.searchParams.append("offset", offset);

      const response = await axios.get(url.toString(), {
        headers: {
          Authorization: `Bearer ${apiKey}`,
        },
      });

      allRecords.push(...response.data.records);
      offset = response.data.offset;
    } while (offset);

    return allRecords;
  } catch (error) {
    console.error("Error fetching Airtable data:", error);
    return [];
  }
};

  
  


  const shuffleArray = (array) => {
    for (let i = array.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
  };

  const getRandomNumber = (min, max) => {
    // Calculate a random number within the range and return it
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  const redirectToPersonPage = (personId) => {
    const url = `https://theismaili.shorthandstories.com/notable-artists-and-athletes-profile-page/?person=${personId}`;

      if (window.self !== window.top) {
    window.top.location.href = url;
  } else {
    window.location.href = url;
  }


 window.open(
  `https://theismaili.shorthandstories.com/notable-artists-and-athletes-profile-page/?person=${personId}`,
  "_blank"
);
  };

  const setPageTitle = (text) => {
    const title = document.getElementById("discoveryTitle");
    title.innerText = text;
  };

  const setPageCaption = (text) => {
    const caption = document.getElementById("discoveryCaption");
    caption.innerText = text;
  };

  const setPageBackground = (url) => {
    const page = document.getElementById("section-3Kdeka9qjS");
    page.style.backgroundImage = `url("${url}")`;
  };

  const createDiscoveryGrid = (records, columnCount) => {
    const MAX_GRID_ITEMS = 24;
    const root = document.getElementById("discoveryRoot");
    const grid = document.createElement("div");
    grid.classList.add("discoveryGrid");

    if (records.length <= 0) {
      const nothingFoundText = document.createElement("h1");
      nothingFoundText.classList.add("nothingFound");
      nothingFoundText.innerText =
        "No results found. Please try a different search term.";
      root.appendChild(nothingFoundText);
      return;
    }

    if (window.matchMedia("(max-width: 768px)").matches) columnCount = 2;

//grid.style.gridTemplateColumns = `repeat(${columnCount}, 1fr)`;
    const recordsToShow = records.slice(0, MAX_GRID_ITEMS);

recordsToShow.forEach((record) => {
      const gridItem = document.createElement("div");
      gridItem.classList.add("gridItem");

      const img = document.createElement("img");
      img.classList.add("discoveryGridImg");
      img.src = record.fields["Profile Picture"][0].url;

      const overlay = document.createElement("div");
      overlay.classList.add("overlay");

      const overlayTitle = document.createElement("div");
      overlayTitle.classList.add("overlayTitle");
      overlayTitle.innerText = record.fields.Name;

      const overlayCaption = document.createElement("div");
      overlayCaption.classList.add("overlayCaption");
      overlayCaption.innerText = record.fields["Talent_Type"];

      overlay.appendChild(overlayTitle);
      if (record.fields["Talent_Type"]) overlay.appendChild(overlayCaption);
      gridItem.appendChild(overlay);
      gridItem.appendChild(img);
      grid.appendChild(gridItem);

      // Add click event listener to grid item
      gridItem.addEventListener("click", () => {
        // Check if the overlay's opacity is 1 (so that user can view overlay first on mobile)
        const overlayOpacity = parseInt(
          window.getComputedStyle(overlay).opacity
        );

        if (overlayOpacity > 0) {
          redirectToPersonPage(record.fields.ID);
        }
      });
    });
    root.style.backgroundColor = "rgba(255, 255, 255, 1)";
    root.style.boxShadow = "10px 22px 42px 3px rgba(0, 0, 0, 0.26)";
    root.appendChild(grid);
  };

  const shuffleRecords = (records, gridImageCount) => {
    const shuffledRecords = shuffleArray(records);
    return shuffledRecords.slice(0, gridImageCount);
  };

  const filterRecords = (inputValue, records, gridImageCount) => {
    let validRecords = records.filter(
      (record) =>
        record.fields["Profile Picture"] &&
        record.fields["Profile Picture"].length > 0
    );

    if (!inputValue || inputValue.trim() === "")
      return shuffleRecords(validRecords, gridImageCount);

    const searchTerm = inputValue.toLowerCase();
    return validRecords.filter((record) => {
      const name = record.fields.Name.toLowerCase();
const country = (record.fields["Country on Profile"] || "").toLowerCase();

      return (
        name.includes(searchTerm) ||
        country?.includes(searchTerm)
      );
    });
  };

  const updateGrid = (records, columnCount) => {
    // Clear the existing grid
    const root = document.getElementById("discoveryRoot");
    root.innerHTML = "";


    // Create a new grid with filtered records
    createDiscoveryGrid(records, columnCount);
  };

  const createSearchInput = (records, pageSettings) => {
    const searchInput = document.createElement("input");
    searchInput.setAttribute("type", "text");
    searchInput.setAttribute(
      "placeholder",
      pageSettings.DiscoveryPageSearchPlaceholder || "Search..."
    );
    searchInput.addEventListener("input", () => {
      const inputValue = searchInput.value;
      const filteredRecords = filterRecords(
        inputValue,
        records,
        pageSettings.DiscoveryPageGridImageCount
      );

      updateGrid(filteredRecords, pageSettings.DiscoveryPageGridColumns);
    });

    const discoverySearch = document.getElementById("discoverySearch");
    discoverySearch.style.backgroundColor = "rgba(255, 255, 255, 1)";
    discoverySearch.style.boxShadow = "10px 22px 42px 3px rgba(0, 0, 0, 0.26)";
    discoverySearch.appendChild(searchInput);
  };

  const createRefreshButton = (records, pageSettings) => {
    const button = document.createElement("button");
    button.textContent = pageSettings.DiscoveryPageGridRefreshButtonText;
    button.style.backgroundColor = pageSettings.DiscoveryPageGridRefreshButtonColor;
    button.addEventListener("click", () => {
      const filteredRecords = filterRecords(
        "",
        records,
        pageSettings.DiscoveryPageGridImageCount
      );

      updateGrid(filteredRecords, pageSettings.DiscoveryPageGridColumns);
    });

    const icon = document.createElement("i");
    icon.classList.add("fa-solid", "fa-arrows-rotate");

    button.appendChild(icon);
    const discoverySearchDiv = document.getElementById("discoverySearch");
    discoverySearchDiv.appendChild(button);
  };

  window.onload = async () => {
    let records = await fetchAirtableData(tableName,tableView);

  const pageSettings = {
    DiscoveryPageCaption: "Welcome to the Discovery Page",
    DiscoveryPageTitle: "Featured Profiles",
    DiscoveryPageBackgroundImage: [{ url: "/assets/bg.jpg" }],
    DiscoveryPageGridImageCount: 24,
    DiscoveryPageGridColumns: 4
  };

  setPageCaption(pageSettings.DiscoveryPageCaption);
  setPageTitle(pageSettings.DiscoveryPageTitle);
  setPageBackground(pageSettings.DiscoveryPageBackgroundImage[0].url);
  createSearchInput(records, pageSettings);
  createRefreshButton(records, pageSettings);
  createDiscoveryGrid(
    filterRecords(null, records, pageSettings.DiscoveryPageGridImageCount),
    pageSettings.DiscoveryPageGridColumns
  );
};
</script>
